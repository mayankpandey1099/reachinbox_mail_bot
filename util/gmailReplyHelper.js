const { GoogleGenerativeAI } = require("@google/generative-ai");

// Initialize GoogleGenerativeAI instance
const genAI = new GoogleGenerativeAI(process.env.API_KEY);

// Function to send auto-reply for a given Gmail message

const sendAutoReply = async (serviceProvider, messageDetails, serviceName) => {
  try {
    // Extract message details
    const messageId = messageDetails.id;
    const emailSubject = messageDetails.payload.headers.find(
      (header) => header.name === "Subject"
    ).value;
    const emailBody = messageDetails.snippet;

    // Categorize email based on its content
    const category = await categorizeEmail({
      subject: emailSubject,
      body: emailBody,
    });
    console.log("Category:", category);

    // Extract names from email headers
    const extractNameFromEmail = (emailAddress) => {
      // Match the name part before the email address
      const match = emailAddress.match(/(.+?)\s?<.+>/);
      // Return the matched name or the full email address if no match
      return match ? match[1] : emailAddress;
    };

    const toName = extractNameFromEmail(
      messageDetails.payload.headers.find((header) => header.name === "To")
        .value
    );
    const fromName = extractNameFromEmail(
      messageDetails.payload.headers.find((header) => header.name === "From")
        .value
    );

    let request = "";

    // sending auto-reply request based on email category
    switch (category) {
      case "Interested":
        request = `Read ${emailBody} and write an email on behalf of ${toName}, Reachinbox asking ${fromName} if they are willing to hop on to a demo call by suggesting a time from Mayank Pandey`;
        break;
      case "Not Interested":
        request = `Read ${emailBody} and write an email on behalf of ${toName}, Reachinbox thanking ${fromName} for their time and asking them if they would like to be contacted in the future from Mayank Pandey`;
        break;
      case "More Information":
        request = `Read ${emailBody} and write an email on behalf of ${toName}, Reachinbox asking ${fromName} if they would like more information about the product from Mayank Pandey`;
        break;
      default:
        request = `Read ${emailBody} and write an email on behalf of ${toName}, Reachinbox asking ${fromName} if they are willing to hop on to a demo call by suggesting a time Mayank Pandey`;
    }

    // Generate reply using Gemini AI model
    const model = genAI.getGenerativeModel({ model: "gemini-pro" });
    const prompt = `You received an email with the subject: "${emailSubject}" and the following content: "${emailBody}". ${request}`;

    const result = await model.generateContent(prompt);
    const response = await result.response;
    const generatedReply = await response.text();

    // Prepare raw message for sending
    const rawMessage = Buffer.from(
      "To: " +
        messageDetails.payload.headers.find((header) => header.name === "From")
          .value +
        "\r\n" +
        "Subject: Re: " +
        emailSubject +
        "\r\n\r\n" +
        generatedReply
    ).toString("base64");

    //send auto-reply
    if (serviceName === "gmail") {
      console.log("you entered in gmail");
      // Send auto-reply using Gmail API
      await serviceProvider.users.messages.send({
        userId: "me",
        requestBody: {
          raw: rawMessage,
        },
      });
    }
    console.log("Reply sent successfully to email with id:", messageId);
  } catch (error) {
    console.error("Error generating or sending reply message:", error);
    return "Error generating or sending reply message: " + error.message;
  }
};

// Function to categorize email based on its content

const categorizeEmail = async (email) => {
  try {
    // Get generative model for categorization
    const model = genAI.getGenerativeModel({ model: "gemini-pro" });

    // Generate prompt for categorization
    const prompt = `You received an email with the subject: "${email.subject}" and the following content: "${email.body}". Please categorize this email into one of the following categories - Interested, Not Interested, More Information:`;

    // Generate categorization using generative model
    const result = await model.generateContent(prompt);
    const response = await result.response;
    const category = await response.text();

    // Check if category is valid
    const validCategories = [
      "Interested",
      "Not Interested",
      "More Information",
    ];
    if (!validCategories.includes(category)) {
      throw new Error("Invalid category generated by AI model.");
    }

    return category;
  } catch (error) {
    console.error("Error categorizing email:", error);
    return "More Information";
  }
};

module.exports = { sendAutoReply };
